function [cost, grad] = softmaxCost(data, labels, sm)

% numClasses - the number of classes 
% inputSize - the size N of the input vector
% lambda - weight decay parameter
% data - the N x M input matrix, where each column data(:, i) corresponds to
%        a single test set
% labels - an M x 1 matrix containing the labels corresponding for the input data
%

% Unroll the parameters from theta
theta = reshape(sm.theta, sm.numClasses, sm.inputDim);

numSa = size(data, 2);

groundTruth = full(sparse(labels, 1:numCases, 1));
cost = 0;

thetagrad = zeros(numClasses, inputSize);

%% ---------- YOUR CODE HERE --------------------------------------
%  Instructions: Compute the cost and gradient for softmax regression.
%                You need to compute thetagrad and cost.
%                The groundTruth matrix might come in handy.

M = theta*data;

M = bsxfun(@minus, M, max(M, [], 1));

e = exp(M);
p = bsxfun(@rdivide,e,sum(e));
indicator = zeros(size(p));
indicator((0:size(labels,1)-1)'*(numClasses)+labels) = 1;

cost = -(1/numCases)*sum(sum(log(p).*indicator))+0.5*lambda*sum(theta(:).^2);
thetagrad = -(1/numCases)*(indicator-p)*data'+lambda*(theta);


% ------------------------------------------------------------------
% Unroll the gradient matrices into a vector for minFunc
grad = [thetagrad(:)];
end

